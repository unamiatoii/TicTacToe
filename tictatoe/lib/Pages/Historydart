import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:tictatoe/component/AppBar.dart';
import 'package:tictatoe/component/BottomAppBar.dart';


// Classe de données pour représenter une partie
class GameHistory {
  final String player1;
  final String player2;
  final String result;
  final DateTime date;
  final Color color; // Ajouter une couleur à la classe GameHistory

  GameHistory({
    required this.player1,
    required this.player2,
    required this.result,
    required this.date,
    required this.color, // Mettre à jour le constructeur
  });
}

class GameHistoryPage extends StatelessWidget {
  // Fonction pour charger les données depuis le fichier JSON
  Future<List<GameHistory>> loadHistoryData() async {
    try {
      // Obtenez le répertoire d'application
      Directory directory = await getApplicationDocumentsDirectory();
      // Obtenez le chemin complet du fichier JSON
      String filePath = '${directory.path}/history.json';

      // Lire le contenu du fichier JSON
      String jsonString = await File(filePath).readAsString();
      // Convertir la chaîne JSON en liste d'objets GameHistory
      List<dynamic> jsonData = json.decode(jsonString);
      List<GameHistory> historyData = jsonData
          .map((game) => GameHistory(
                player1: game['player1'],
                player2: game['player2'],
                result: game['result'],
                date: DateTime.parse(game['date']),
                color: Color(0xFF7A90A4),
              ))
          .toList();
      return historyData;
    } catch (e) {
      print('Erreur lors du chargement des données : $e');
      return [];
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar:  RoundedAppBar(
        title: "Historique des parties",
      ),
      bottomNavigationBar:  CustomBottomAppBar(),
      body: FutureBuilder<List<GameHistory>>(
        future: loadHistoryData(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Erreur de chargement des données'));
          } else {
            List<GameHistory>? history = snapshot.data;
            if (history != null && history.isNotEmpty) {
              return ListView.builder(
                itemCount: history.length,
                itemBuilder: (context, index) {
                  final game = history[index];
                  return _buildGameListItem(game);
                },
              );
            } else {
              return Center(child: Text('Aucune donnée disponible'));
            }
          }
        },
      ),
    );
  }

Widget _buildGameListItem(GameHistory game) {
  return Card(
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(20.0), // Arrondir les bords de la carte
    ),
    elevation: 4,
    margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
    child: InkWell(
      borderRadius: BorderRadius.circular(20.0), // Arrondir les bords du InkWell
      onTap: () {
        // Action à effectuer lorsqu'un élément de partie est cliqué
      },
      child: Container(
        padding: EdgeInsets.all(16.0),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(20.0), // Arrondir les bords du conteneur
          color: game.color,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '${game.player1} vs ${game.player2}',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text(
              'Vainqueur: ${game.result}',
              style: TextStyle(fontSize: 16),
            ),
            SizedBox(height: 4),
            Text(
              'Date: ${_formatDate(game.date)}',
              style: TextStyle(fontSize: 16),
            ),
          ],
        ),
      ),
    ),
  );
}

  // Fonction pour formater la date dans un format convivial
  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }
}
